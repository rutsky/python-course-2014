
.. Язык программирования Python
   Лекция № 9.

.. role:: python(code)
   :language: python

.. TODO: в заголовке документа должен быть Python

=====================
Язык программирования
=====================

.. rst-class:: python-logo
.. figure:: ../common/images/python-logo-generic.svg
   :align: center

.. rst-class:: center-text

Лекция № 9

.. rst-class:: center-text

Владимир Владимирович Руцкий rutsky.vladimir@gmail.com

.. rst-class:: center-cells
.. list-table::


   * - .. image:: ../common/images/cgsg.png
          :width: 200 px
     - .. image:: ../common/images/logo_jetbrains.svg
     - .. image:: ../common/images/pml30.png
          :width: 200 px


План занятия
============

* Interoperability с Python

* Django (продолжение)


.. rst-class:: smaller

Interoperability с Python
=========================

* Python простой, но мощный язык, удобный для написания высокоуровневой логики

  * при наличии реализованных низкоуровневых инструментов, библиотек

* **Interoperability** компонентов/программ — совместная работа компонентов/программ

* Пример interoperability с Python:

  "Оборачивание" библиотек в Python модули — рассматривали на примере SDL/pygame

  * Boost.Python, SWIG
 
.. rst-class:: smaller

Native code
===========

* *native* code/binary/executable — код, скомпилированный в машинные коды, исполняемые на определённом процессоре (и специфичные для него)

  * Код на Python парсится в байткод (.pyc), который интерпретируется программой-интерпретатором — Python не "нативный"

* Примерами нативного кода являются скомпилированные из C/C++ библиотеки (DLL) и выполняемые файлы (exe)

* Для нативного кода существуют соглашения о вызове функций, передачи аргументов, возвращению значений и т.п. (*calling conventions*)

  * Например, в каком порядке аргументы функций кладутся на стек в памяти, кто очищает стек, в каком регистре процессора будет результат функции

.. rst-class:: smaller

Вызов нативного кода из Python
================================

* Для вызова нативного кода создана библиотека `libffi` (*Foreign Function Interface*)

* Python предоставляет обертку над этой библиотекой — модуль :py:mod:`ctypes`

* :py:mod:`ctypes` позволяет создавать прозрачные обёртки над функциями из нативных библиотек::

    >>> import ctypes
    >>> # Загрузка MyLibrary.DLL для вызова по соглашению stdcall
    ... my_library = ctypes.windll.LoadLibrary('MyLibrary') 
    >>> # Обращение к атрибутам my_library прозрачно транслируется в создание
    ... # обёрток для вызова функций из DLL
    ... my_library.test(5, 6) # Вызов функции с именем "test"
    11
    >>>

Возможности ctypes
==================

* Загрузка нативных библиотек, выполняемых файлов (`LoadLibrary`)

* Получение Python-обёрток над функциями из нативных модулей

* Вызов и передача примитивных типов, структур, указателей, блоков памяти внутрь функций (а также получение результата)

* Создание `callback` функций на Python и передача их внутрь нативных модулей

Как и любой нативный код — **очень** хрупкая вещь

* легко обратиться "мимо" нужной памяти

Соглашения о вызове функций в `ctypes`
======================================

* :py:mod:`ctypes` предоставляет несколько обёрток для загрузки модулей с разными соглашениями о вызове функций

  * `ctypes.cdll` — соглашение `cdecl`
  * `ctypes.windll` — соглашение `stdcall`
  * `ctypes.oledll` — соглашение `stdcall`, плюс функции возвращают `HRESULT`
  * `ctypes.pydll` — соглашение `cdecl`, но используется для библиотек Python

Стандартные модули ОС
=====================

* Для стандартных библиотек в разных ОС предоставляются лениво загружаемые модули

* В Windows:

  .. literalinclude:: examples/win32_setcursorpos.py

Передача аргументов
===================

* Большая часть типов Python должна быть обёрнута специальными типами `c_types` для передачи в функции

  * `c_bool`, `c_char`, `c_long`, `c_float`, `c_double` и т.п.

* В GNU/Linux:

  .. literalinclude:: examples/linux_printf.py

  .. code-block:: none

     $ python linux_printf.py 
     Hello, User! x = 3.1416
     24
     $

Automation в Windows
====================

* Для interoperability в Windows была разработана система компонентов: **COM**, *Component Object Model*

  * Низкоуровневый, но объектно-ориентированный интерфейс

  * Поддерживается в том или ином виде большим количеством продуктов Microsoft

  * Позволяет связывать программы на C++, .NET, Visual Basic и др.

  * Есть биндинги для COM в разных языках, включая Python

* В GNU/Linux в качестве альтернативы COM часто используется **dbus**

.. rst-class:: smaller2

COM в Python
============

.. https://stackoverflow.com/questions/1045628/can-i-use-win32-com-to-replace-text-inside-a-word-document

Пример замены текста в документе Word используя обёртку над COM `pywin32`

.. literalinclude:: examples/com_word_replace.py


.. rst-class:: smaller2

Automation в OpenOffice
=======================

* В OpenOffice/LibreOffice используется своя технология `UNO` для вызова функций

.. literalinclude:: examples/pyuno_example.py


Встраивание Python в приложения
===============================

* Python — популярный язык для скриптования логики приложения

* Часто встраивается внутрь приложений: GIMP, Blender, Maya, ArcGIS

* Примеры на следующей лекции

Django (продолжение)
====================

* Перевод документации и туториала на русский язык: http://djbook.ru/rel1.6/

* Задача: написать гостевую книгу

  * Гостевая книга: веб страница со списком сообщений и возможностью добавлять сообщения

  * Каждое сообщение: автор, дата, текст сообщения

* Дополнительные задания:

  * Показывать сообщения постранично

  * Сортировка сообщений по дате или автору

  * Удаление сообщений
  
  * Редактирование сообщений
