
.. Язык программирования Python slides file, created by
   hieroglyph-quickstart on Tue Feb 18 01:11:59 2014.

.. role:: python(code)
      :language: python

=====================
Язык программирования
=====================

.. rst-class:: python-logo
.. figure:: /_static/images/python-logo-generic.svg
   :align: center


.. rst-class:: center-cells
.. list-table::

   * - .. image:: /_static/images/cgsg.png
          :width: 200 px
     - Владимир Руцкий rutsky.vladimir@gmail.com
     - .. image:: /_static/images/pml30.png
          :width: 200 px


План лекции
===========

* Часть I

  * Что такое Python?

  * Зачем нужен Python и где его используют?

* Часть II

  * Установка Python

  * Введение в Python

  * Практика



Что такое Python?
=================

* Python ([ˈpʌɪθ(ə)n] — *пайтон*) — язык программирования (далее ЯП)

* Разрабатывался с 1990 года (для сравнения: C — с 1969, C++ — с 1983)

* Оригинальный автор: Гвидо ван Россум (Guido van Rossum)

* http://python.org

  .. list-table::

     * - .. literalinclude:: examples/factorial.py
       - .. literalinclude:: examples/factorial.out


Python — высокоуровневый ЯП
===========================

* Может оперировать с абстрактными объектами и структурами данных, вроде

  * файла,
  * дерева,
  * базы данных и т.п.


.. rst-class:: smaller

Python — ориентирован на разработчика
=====================================

* Программы на Python в 5–10 раз короче программ
  решающих те же задачи, но написанных на C++, и в 3–5
  раз короче программ на Java

* Программы на Python легко читаются

* Программы на Python лаконичны

  * "синтаксический сахар"
  * большая стандартная библиотека

    - работа с сетью, web, работа с файлами баз данных, архивами,
      мультипоточность, мультипроцессорность, высокоуровневые
      структуры данных (комплексные числа, списки, словари, множества)

* Подходит для быстрой разработки программ, прототипирования


Python — масштабируемый
=======================

* Масштабируемость кода:

  * наборы команд объединяются в **функции**

  * функции объектов объединяются в **классы**

  * наборы функций и классов объединяются в
    **модули** (отдельные файлы)

  * модули группируются в **пакеты** (директории с
    файлами модулей)

* Масштабируемость по производительности:

  * Узкие места программ можно переписать на C
    или C++


Python — интерпретируемый
=========================

* Программа — набор строк кода, лежащий в
  одном или нескольких файлах, выполняется
  «на лету», без предварительной компиляции

* Позволяет вносить изменения и быстро
  перезапускать программу

* Минус: меньшая скорость работы, по
  сравнению с компилируемыми языками


Интроспекция
============

* Программе на Python доступна вся
  информация о себе: список переменных,
  функий, классов, информация о методах
  классов и т.п.

* Информацию о себе по большей части
  можно модифицировать

  * В процессе работы программы, программа
    может создавать новые классы и функции и
    изменять уже существующие


Динамическая типизация
======================

* Нет предварительного объявления типов —
  тип переменной выводится в процессе
  выполнения

  .. code-block:: python

     # Функция может вернуть объект любого типа
     result = f(x)

* Строгая типизация

  Недопустимо: :python:`5 + "3"`


Python — мультипарадигменный
============================

* Поддержка ООП

  * Классы, наследование, полиморфизм, условная
    инкапсуляция

* Поддержка функционального программирования

  * Лямбда-выражения, list comprehension

* Python вобрал в себя наиболее удобные
  возможности популярных языков
  программирования (ABC, Modula-3, Lisp, Tcl,
  Smalltalk, C, Java, Icon)


Дополнительные характеристики Python
====================================

* Полностью автоматическое управление памятью

  * Сборщик мусора

* Поддержка механизма исключений


Интерпретаторы Python
=====================

* Интерпретаторы Python:

  * **CPython** (написан на C) — основная реализация
  * PyPy (написан на Python)
  * Jython (написан на Java)
  * IronPython (написан на C#)
  * и другие

* Разные интерпретаторы ориентированы на разные
  платформы (.Net, Java)

* Большиство интерпретаторов - под либеральной
  свободной лицензией

* CPython выступает в качестве стандарта


Версии Python
=============

* Две основные ветки

  * Вторая: 2.5, 2.6, 2.7

    * быстрее
    * больше библиотек

  * Третья: 3.2, 3.3, вот-вот выйдет 3.4
    * лучше синтаксис

* Каждая следующая версия расширяет и улучшает язык

* Внутри ветки версии обратно совместимы

* Третья версия обратно не совместима со второй

* Мы будем изучать Python 3.3, в реализации CPython


Библиотеки Python
=================

* Мощная встроенная библиотека

  * Работа с Web, регулярные выражения, архивы,
    многозадачность, UI

* Большое количество Python-интерфейсов для
  популярных библиотек

  * 2D и 3D графика, OpenGL, DirectX
  * работа с базами данных, MySQL, PostgreSQL
  * работа с мультимедиа: звук, видео, изображения
  * разработка пользовательских интерфейсов, Qt, Gtk, WxWidgets


Применение Python (1/2)
=======================

* Интерактивная консоль — мощный «калькулятор»

  * работа с числами, матрицами, файлами,
    изображениями, статистического анализа и др.

* ЯП для небольших скриптов

  * обработка изображений, создание резервных копий

* ЯП для прототипирования

  * быстрое создание шаблона программы с UI
  * быстрая проверка работы алгоритма

* ЯП для полноценных программ

  * Gajim, BitTorrent, Dropbox, EVE Online


Применение Python (2/2)
=======================

* ЯП для web-приложений

  * много фреймворков, активно используют крупные
    компании, вроде Google и Яндекс

* Встраиваемый в приложения ЯП

  * Встроенная Python-консоль в которой можно
    оперировать с объектами приложений на языке
    Python

    * 3D моделирование: Blender, Maya
    * Обработка изображений: GIMP
    * Работа с ГИС данными: ESRI ArcGIS
    * Математические пакеты: Sage, IPython Notebook


Примеры использования Python
============================

На следующей лекции
