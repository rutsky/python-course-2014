>>> def my_generator(n):
...     for i, ch in zip(range(n), "ABCDEFGHIK"):
...         # Если в функции встречается команда yield, то функция — генератор
...         yield ch + str(i)
...
>>> # Генераторы возвращают итератор
... it = my_generator(3)
>>> it  # doctest: +ELLIPSIS
<generator object my_generator at 0x...>
>>> # При вызове генератора код тела функции не выполняется.
... # При попытке получить следующее значение итератора функция выполнится до
... # первого yield
... next(it)
'A0'
>>> # При запросе следующего значения, выполнение функции продолжится
... # с места, где она остановилась на yield в последний раз.  Состояние
... # переменных сохраняется, как будто функция и не прерывалась.
... next(it)
'B1'
>>> next(it)
'C2'
>>> next(it) # Когда тело функции заканчивается, итератор считается исчерпанным
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>>
