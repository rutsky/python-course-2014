
.. Язык программирования Python
   Лекция № 5.

.. role:: python(code)
   :language: python

.. TODO: в заголовке документа должен быть Python

=====================
Язык программирования
=====================

.. rst-class:: python-logo
.. figure:: ../common/images/python-logo-generic.svg
   :align: center

.. rst-class:: center-text

Лекция № 5

.. rst-class:: center-text

Владимир Владимирович Руцкий rutsky.vladimir@gmail.com

.. rst-class:: center-cells
.. list-table::


   * - .. image:: ../common/images/cgsg.png
          :width: 200 px
     - .. image:: ../common/images/logo_jetbrains.svg
     - .. image:: ../common/images/pml30.png
          :width: 200 px


План занятия
============

* Принципы объектно-ориентированного программирования (ООП)

* Классы в Python

* Практика


Объектно ориентированное программирование (ООП)
===============================================

* ООП — *парадигма* программирования — совокупность идей и понятий,
  определяющих стиль написания программ

  * Примеры других парадигм программирования: структурное программирование,
    функциональное программирование.

    См. `https://ru.wikipedia.org/wiki/Парадигма\_программирования
    <https://ru.wikipedia.org/wiki/%D0%9F%D0%B0%D1%80%D0%B0%D0%B4%D0%B8%D0%B3%D0%BC%D0%B0_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F>`_

* Основные понятия ООП: *объект*, *класс*, *абстракция*, *наследование*,
  *инкапсуляция*, *полиморфизм*


Объект. Состояние. Интерфейс
============================

* **Объект** — сущность, обладающая определённым состоянием,
  поведением и свойствами

  * Объект «автомобиль с номером aa030a» (конкретный)

  * **Внешний интерфейс** (доступен всем пользователям):

    * свойства (*атрибуты*): «цвет», «марка», «мощность двигателя», «количество мест»

    * поведение (функции, *методы*): «завестись», «ехать», «повернуть», «включить фары»

  * **Внутреннее состояние** (доступно только объекту):

    * «заведена», «включены фары», «положение роторов», «напряжение на
      контурах»


Внешний интерфейс
=================

* Объект «водитель Пётр» взаимодействует с объектом «автомобиль
  аа030а» посредством **внешнего интерфейса**

  * Пётр нажимает педали, крутит руль, получает информацию о цвете и марке
    автомобиля

Внутреннее состояние
====================

* Внешний объект «Пётр» **не должен непосредственно взаимодействовать с
  внутренним состоянием** объекта «автомобиль аа030а»

  * «Пётр» не должен соединять контакты электросистемы объекта «автомобиля»,
    не должен двигать роторы двигателя и т.п.

  * Механизм изменения внутреннего состояния может быть различным у разных
    объектов-автомобилей

  * Прямое изменение внутреннего состояния внешними объектами скорее всего
    приведёт к поломке системы (объекта «автомобиль аа030а»)

  * Говорят, что объект **инкапсулирует** свои внутренние свойства —
    скрывает своё внутреннее состояние

Преимущества объектов
=====================

* Объекты состоят из **внешнего интерфейса** и **внутренней реализации**

* Взаимодействие с объектом — только через внешний интерфейс

  * Обеспечивает гибкость — возможность свободного изменения внутренней
    реализации без боязни что-то сломать

    * У всех объектов «автомобилей» единый интерфейс управления
      (с функциями «поверни руль», «включи дальний свет» и т.п.),
      но разная внутренняя реализация

  * Обеспечивает консистентность (согласованность) — объект сам меняет своё
    внутреннее состояние и обеспечивает его корректность


.. rst-class:: smaller2

Классы
======

* **Класс** — совокупность объектов (**экземпляров класса**), объединённых
  общими свойствами и поведением

  * Класс «Автомобили» — совокупность объектов, имеющих

    * поведения: «завестись», «ехать», «повернуть»
    * свойства: «марка», «цвет», «макс. скорость», «количество мест»
      «мощность двигателя»

  * Класс «Велосипеды»: 

    * поведение: «ехать», «повернуть», «подпрыгнуть»
    * свойства: «марка», «цвет», «макс. скорость», «материал рамы»

  * Класс «Транспортные средства»:

    * поведения: «ехать», «повернуть»
    * свойства: «марка», «цвет», «макс. скорость»


.. rst-class:: smaller2

Наследование классов
====================

* Класс «Транспортные средства» содержит в себе
  классы «Автомобили» и «Велосипеды»

  * каждый экземпляр класса «Автомобили» и класса «Велосипеды» является
    экземпляром класса «Транспортные средства»

* Классы «Автомобили» и «Велосипеды» **наследуют свойства и поведение** класса
  «Транспортные средства»

  * Все «транспортные средства» имеют метод «ехать» и свойство «цвет»

* Говорят, что

  * «Автомобили» и «Велосипеды» — **дочерние** (или **производные**) классы для класса «Автомобиль»

  * класс «Автомобиль» — **родительский** (или **базовый**) для классов «Автомобили» и «Велосипеды»


Абстракция
==========

* **Абстрагирование** — выделение значимых свойств, опуская незначимые

* Классы — абстракции

  * «Транспортное средство» — абстракция

    * Для «транспортных средств» важны только «цвет», «макс. скорость» и
      возможность «ехать», «повернуть»

  * «Автомобиль» — тоже абстракция

    * Для «автомобилей» важно, что они имеют двигатель определённой «мощности»
      (в отличие от «велосипеда»)


Полиморфизм
===========

* При наследовании реализация метода может быть изменена — **полиморфизм**

  * Рассмотрим класс «Автомобиль Лада Калина»

  * Создадим **производный** от класса «Автомобиль Лада Калина» класс
    «Автомобиль Лада Калина с двигателем от Ford», в котором изменим
    **внутреннюю реализацию** методов «завестись» и «поехать» для
    двигателя от Ford

  * Новые автомобили, экземпляры «Автомобиль Лада Калина с
    двигателем от Ford», поддерживают интерфейс класса «Автомобиль
    Лада Калина», но имеют **изменённую** (**полиморфную**) реализацию


Классы в Python
===============

.. literalinclude:: examples/class.pycon


.. rst-class:: smaller

Методы
======

.. literalinclude:: examples/class_methods.pycon


.. rst-class:: smaller

Атрибуты (1/2)
==============

.. literalinclude:: examples/class_attributes.pycon


.. rst-class:: smaller

Атрибуты (2/2)
==============

.. literalinclude:: examples/class_attributes2.pycon


.. rst-class:: smaller

Конструктор
===========

.. literalinclude:: examples/class_constructor.pycon


.. rst-class:: smaller2

Перегрузка
==========

.. literalinclude:: examples/class_overloads.pycon
   

.. rst-class:: smaller2

Статические переменные
======================

.. literalinclude:: examples/class_static.pycon


.. rst-class:: smaller2

Приватные атрибуты и методы
===========================

.. literalinclude:: examples/class_private.pycon


.. rst-class:: smaller2

Наследование
============

.. literalinclude:: examples/class_inheritance.pycon


.. rst-class:: smaller2

Функции :py:func:`isinstance()`, :py:func:`issubclass()`
========================================================

.. literalinclude:: examples/class_isinstance.pycon


.. rst-class:: smaller2

Специальные методы (1/3)
========================

.. literalinclude:: examples/class_special_methods.pycon

Подробно:
http://docs.python.org/3/reference/datamodel.html


.. rst-class:: smaller2

Специальные методы (2/3)
========================

.. literalinclude:: examples/class_special_methods2.pycon


.. rst-class:: smaller2

Специальные методы (3/3)
========================

.. literalinclude:: examples/class_special_methods3.pycon

Практика
========
